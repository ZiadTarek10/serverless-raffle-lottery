1- Create DynamoDB table: 
    
        1. Create a DynamoDB Table
        Use Terraformâ€™s aws_dynamodb_table resource to define the table.

        Set the name to "dynamodb-table-lottery".

        2. Define Billing Mode
        Set billing_mode = "PAY_PER_REQUEST" to enable on-demand capacity (no need to manage read/write units).

        3. Configure Primary Key
        Define hash_key = "email" as the primary key (partition key).

        4. Define Attributes
        Specify the attribute email of type S (String), which acts as the primary key.

        5. Apply Tags
        Assign a tag (Name = "dynamodb-table-lottery") for easier identification in AWS.

--------------------------------------------------------------------

2- Create lambda functions:

        1. Create an IAM Role for Lambda Execution
        Define an IAM role (lambda_dynamodb_role) that allows Lambda to assume it.

        Attach the AWSLambdaBasicExecutionRole to enable logging in CloudWatch.

        Attach the AmazonDynamoDBFullAccess policy for full DynamoDB access.

        Attach the AWSLambdaInvocation-DynamoDB policy for Lambda invocation from DynamoDB Streams.

        Attach the CloudWatchLogsFullAccess policy to enable logging and monitoring.

        Attach the AWSLambdaDynamoDBExecutionRole policy to allow Lambda to interact with DynamoDB.

        2. Define Custom IAM Policy for Lambda and DynamoDB
        Create a custom IAM policy allowing Lambda to perform CRUD operations on the DynamoDB table.

        Attach this policy to the lambda_dynamodb_role.

        3. Package and Upload Lambda Functions
        Compress the Lambda function source files into ZIP archives using Terraform's archive_file.

        Create three Lambda functions: apply-function, count-function, and draw-function.

        Assign each Lambda function the IAM role lambda_dynamodb_role.

        Define environment variables for Lambda functions if needed.

        4. Deploy the Lambda Functions
        Specify the correct function handlers for each Lambda.

        Use the source_code_hash from the archive_file to ensure deployments update when code changes.

        Use the latest supported Node.js runtime (nodejs18.x).

--------------------------------------------------------------------

3- Create API Gateway: (stage 3)

        1. Setup Domain Name
        Create domain name -> must be done on manually or by using aws cli

        2. Create an SSL Certificate in ACM
        Request an ACM certificate for api.areulucky.com using DNS validation.

        Enable create_before_destroy to avoid downtime during certificate updates.

        3. Validate the Certificate in Route 53
        Create a Route 53 record for DNS validation of the ACM certificate.

        This step ensures AWS can verify ownership of the domain.

        4. Complete Certificate Validation
        Validate the ACM certificate by linking the DNS validation records.

        5. Create an HTTP API in API Gateway
        Define an HTTP API (api_raffle).

        Configure CORS to allow requests from specific domains (areulucky.com).

        6. Deploy API Stage
        Create a stage (dev_stage) with auto-deployment enabled.

        7. Setup Custom Domain Name for API Gateway
        Define a custom domain (api.areulucky.com).

        Attach the validated SSL certificate.

        Enable mutual TLS authentication, specifying the CA certificate stored in S3.

        8. Map Custom Domain to API Gateway
        Link the API to the custom domain with a path (/raffle).

        9. Update Route 53 with Custom Domain Record
        Add a DNS record to Route 53 to map api.areulucky.com to the API Gateway endpoint.

        10. Connect lambda function with api gateway 

--------------------------------------------------------------------

4-  Stage 4
    Enable mutual tls authentication for api gateway

        1.  Create an S3 Bucket for CA Certificates  
        - Define an S3 bucket to store the CA certificate used in API Gateway.  

        2.  Upload CA Certificate to S3  
        - Ensure the `RootCA.pem` file is available locally before uploading.  

        3.  Configure API Gateway Custom Domain  
        - Reference the uploaded CA certificate in the API Gateway configuration.  
        - Disable the default endpoint for security.  
        - Set up required API routes (`draw` and `apply`).  
--------------------------------------------------------------------

5- Stage 5

        1.  Create an S3 Bucket  
        - Define an S3 bucket to host the static website.  

        2.  Configure Public Access  
        - Set up an access block to allow public access.  

        3.  Enable Static Website Hosting  
        - Configure the S3 bucket for website hosting and define the default index document.  

        4.  Upload Website Files  
        - Upload HTML files (`apply.html`, `draw.html`) to the S3 bucket.  

        5.  Set Up an S3 Bucket Policy  
        - Define an IAM policy to allow public read access to S3 objects.  

        6.  Request an SSL Certificate  
        - Use AWS ACM to generate an SSL certificate for the domain with DNS validation.  

        7.  Create DNS Records for Validation  
        - Set up Route 53 DNS records for certificate validation.  

        8.  Validate the SSL Certificate  
        - Confirm ACM certificate validation once DNS records are propagated.  

        9.  Define CloudFront Origin Access Control (OAC)  
        - Configure OAC to securely restrict S3 access to CloudFront only.  

        10. Deploy a CloudFront Distribution  
            - Set CloudFront to serve the S3 bucket content with HTTPS.  
            - Define cache behaviors and policies.  
            - Associate the custom domain and SSL certificate.  





Manuals
add triggers
add the custome domain name to the api